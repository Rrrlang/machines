//const alphabet = ['R', 'r']
const alphabet = ['ε', 'R', 'r', '+', '#', '*']
const tm = `
(0,r,r,>,0)
(0,R,R,>,1)
(1,r,r,>,0)
(1,R,#,<,2)
(2,R,#,>,3)
(3,#,#,>,4)
(4,r,r,>,4)
(4,R,R,>,4)
(4,ɛ,#,>,5)
(5,ɛ,#,<,6)
(6,#,ɛ,<,7)
(7,ɛ,ɛ,<,7)
(7,R,ɛ,>,8)
(8,ɛ,R,<,7)
(7,r,ɛ,>,9)
(9,ɛ,r,<,7)
(7,#,#,>,10)
(10,ɛ,*,>,11)
(11,R,R,>,11)
(11,r,r,>,11)
(11,#,ɛ,>,12)
(12,ɛ,#,<,13)
(13,ɛ,ɛ,<,13)
(13,R,ɛ,>,14)
(14,ɛ,R,<,13)
(13,r,ɛ,>,15)
(15,ɛ,r,<,13)
(13,*,ɛ,>,16)
(16,ɛ,*,<,13)
(13,#,ɛ,>,17)
(17,ɛ,#,<,18)
(18,ɛ,r,<,19)
(19,#,#,<,20)
(20,R,R,<,20)
(20,r,r,<,20)
(20,ɛ,ɛ,>,21)
(21,r,+,>,22)
(22,R,R,>,22)
(22,r,r,>,22)
(22,#,#,>,23)
(23,+,+,>,23)
(23,r,+,<,25)
(23,#,#,<,24)
(24,+,r,<,24)
(24,+,r,<,24)
(24,#,#,<,29)
(29,R,R,<,29)
(29,r,r,<,29)
(29,+,+,>,30)
(30,r,r,>,30)
(30,R,R,>,31)
(31,r,r,>,31)
(31,R,R,>,32)
(32,r,r,>,32)
(32,R,R,>,33)
(33,r,r,>,33)
(33,R,R,>,34)
(34,r,r,>,34)
(34,R,R,>,21)
(34,#,#,>,123)
(25,+,+,<,25)
(25,#,#,<,26)
(26,R,R,<,26)
(26,r,r,<,26)
(26,+,+,>,21)
(21,R,R,>,27)
(27,R,R,>,27)
(27,r,r,>,27)
(27,#,#,>,28)
(28,+,+,>,28)
(28,r,r,<,24)
(28,#,#,<,35)
(35,+,+,<,35)
(35,#,#,<,36)
(36,R,R,<,36)
(36,r,r,<,36)
(36,+,+,>,37)
(37,R,R,>,38)
(38,r,r,>,39)
(39,R,R,>,40)
(40,R,R,>,40)
(40,r,r,>,40)
(40,#,#,>,41)
(41,+,+,>,41)
(41,#,#,>,42)
(42,R,R,>,42)
(42,r,r,>,42)
(42,*,*,>,43)
(43,r,r,<,49)
(43,#,#,<,49)
(43,R,R,<,51)
(39,r,r,>,44)
(44,R,R,>,45)
(45,R,R,>,45)
(45,r,r,>,45)
(45,#,#,>,46)
(46,+,+,>,46)
(46,#,#,>,47)
(47,R,R,>,47)
(47,r,r,>,47)
(47,*,*,>,48)
(48,r,r,<,51)
(48,R,R,<,49)
(48,#,#,<,49)
(49,*,*,<,50)
(50,R,R,<,50)
(50,r,r,<,50)
(50,#,#,<,24)
(51,*,*,<,52)
(52,R,R,<,52)
(52,r,r,<,52)
(52,#,#,<,53)
(53,+,+,<,53)
(53,#,#,<,54)
(54,R,R,<,54)
(54,r,r,<,54)
(54,+,+,>,55)
(55,r,r,>,55)
(55,R,R,>,56)
(56,r,r,>,56)
(56,R,R,>,57)
(57,r,r,>,58)
(58,R,R,>,59)
(59,R,R,>,59)
(59,r,r,>,59)
(59,#,#,>,60)
(60,+,+,>,60)
(60,#,#,>,61)
(61,R,R,>,61)
(61,r,r,>,61)
(61,*,*,>,62)
(62,R,R,<,72)
(62,r,R,<,72)
(62,#,R,>,63)
(63,ɛ,#,<,70)
(70,R,R,<,72)
(58,r,r,>,64)
(64,R,R,>,65)
(65,R,R,>,65)
(65,r,r,>,65)
(65,#,#,>,66)
(66,+,+,>,66)
(66,#,#,>,67)
(67,R,R,>,67)
(67,r,r,>,67)
(67,*,*,>,68)
(68,R,r,<,72)
(68,r,r,<,72)
(68,#,r,>,69)
(69,ɛ,#,>,71)
(71,r,r,>,72)
(72,*,*,<,72)
(72,R,R,<,72)
(72,r,r,<,72)
(72,#,#,<,73)
(73,+,+,<,73)
(73,#,#,<,74)
(74,R,R,<,74)
(74,r,r,<,74)
(74,+,+,>,75)
(75,r,r,>,75)
(75,R,R,>,76)
(76,r,r,>,76)
(76,R,R,>,77)
(77,r,r,>,77)
(77,R,R,>,78)
(78,r,r,>,79)
(79,r,r,>,80)
(80,R,R,>,80)
(80,r,r,>,80)
(80,#,#,>,81)
(81,+,+,>,81)
(81,#,#,>,82)
(82,R,R,>,82)
(82,r,r,>,82)
(82,*,*,>,83)
(83,R,*,<,84)
(83,r,*,<,85)
(84,*,R,>,92)
(85,*,r,>,92)
(79,R,R,>,86)
(86,R,R,>,86)
(86,r,r,>,86)
(86,#,#,>,87)
(87,+,+,>,87)
(87,#,#,>,88)
(88,R,R,>,88)
(88,r,r,>,88)
(88,*,*,<,89)
(89,r,*,>,90)
(89,R,*,>,91)
(90,*,r,<,92)
(91,*,R,<,92)
(92,R,R,<,92)
(92,r,r,<,92)
(92,*,*,<,92)
(92,#,#,<,93)
(93,+,#,>,94)
(94,#,ɛ,>,95)
(95,*,ɛ,<,96)
(96,ɛ,*,>,97)
(97,ɛ,ɛ,>,95)
(95,R,ɛ,<,98)
(98,ɛ,R,>,99)
(99,ɛ,ɛ,>,95)
(95,r,ɛ,<,100)
(100,ɛ,r,>,101)
(101,ɛ,ɛ,>,95)
(95,#,ɛ,<,102)
(102,ɛ,#,<,103)
(103,R,R,<,103)
(103,r,r,<,103)
(103,*,*,<,103)
(103,#,#,<,93)
(93,#,#,<,104)
(104,R,R,<,104)
(104,r,r,<,104)
(104,+,+,>,105)
(105,r,r,>,105)
(105,R,R,>,106)
(106,r,r,>,106)
(106,R,R,>,107)
(107,r,r,>,107)
(107,R,R,>,108)
(108,r,r,>,108)
(108,R,R,>,109)
(109,r,+,>,110)
(110,R,R,>,110)
(110,r,r,>,110)
(110,#,#,>,111)
(111,r,r,>,111)
(111,#,#,>,112)
(112,R,R,>,112)
(112,r,r,>,112)
(112,*,*,>,112)
(112,#,ɛ,>,113)
(113,ɛ,#,<,114)
(114,ɛ,ɛ,<,114)
(114,*,ɛ,>,115)
(115,ɛ,*,<,114)
(114,R,ɛ,>,116)
(116,ɛ,R,<,114)
(114,r,ɛ,>,117)
(117,ɛ,r,<,114)
(114,#,r,>,118)
(118,ɛ,#,<,119)
(119,r,r,<,119)
(119,#,#,<,120)
(120,R,R,<,120)
(120,r,r,<,120)
(120,+,+,>,121)
(121,r,+,>,110)
(121,R,R,<,122)
(121,#,#,<,122)
(122,R,R,<,122)
(122,r,r,<,122)
(122,+,r,<,122)
(122,ɛ,ɛ,>,21)
`

const code = tm.replaceAll(/\s/g,'').replaceAll(')','').replace('(','').split('(')
.map(tuple => tuple.split(',').map((v,i) => {
    switch (i) {
        case 0: case 4: {   // states
            const n = parseInt(v.replace('q',''))
            let q = 'r'
            for (let i = 0; i < n; i++) q += 'r'
            return q
        }
        case 1: case 2: {   // read & write symbol
            const n = alphabet.indexOf(v)
            let s = 'r'
            for (let i = 0; i < n; i++) s += 'r'
            return s
        }
        case 3: {           // move action
            if ('<' === v) return 'r'
            if ('>' === v) return 'rr'
        }
    }
}).join('R')  // join parts of a tuple
).join('R')  // join tuples

console.log(code)
